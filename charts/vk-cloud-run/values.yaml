# Default values for vk-cloud-run.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: jimfim/virtual-kubelet-gcr
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "0.2.0-alpha.1"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "vk-cloud-run"

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: 
- name: application-default-credentials # To access this volume, this name must be used inside volumeMounts of the container
  configMap:
    name: application-default-credentials # Name of the configMap
    items:
      - key: application_default_credentials.json  # Name of the item we had used inside our ConfigMap (under data:)
        path: application_default_credentials.json # Name of the file to be placed inside /etc
- hostPath:
    path: /etc/ssl/certs
    type: DirectoryOrCreate
  name: ca-certs
- hostPath:
    path: /etc/ca-certificates
    type: DirectoryOrCreate
  name: etc-ca-certificates
- hostPath:
    path: /run/config/pki
    type: DirectoryOrCreate
  name: k8s-certs
- hostPath:
    path: /usr/local/share/ca-certificates
    type: DirectoryOrCreate
  name: usr-local-share-ca-certificates
- hostPath:
    path: /usr/share/ca-certificates
    type: DirectoryOrCreate
  name: usr-share-ca-certificates

# Additional volumeMounts on the output Deployment definition.
volumeMounts: 
- mountPath: /etc/ssl/certs
  name: ca-certs
  readOnly: true
- mountPath: /etc/ca-certificates
  name: etc-ca-certificates
  readOnly: true
- mountPath: /run/config/pki
  name: k8s-certs
  readOnly: true
- mountPath: /usr/local/share/ca-certificates
  name: usr-local-share-ca-certificates
  readOnly: true
- mountPath: /usr/share/ca-certificates
  name: usr-share-ca-certificates
  readOnly: true
- name: application-default-credentials
  mountPath: /application_default_credentials.json # This should be your final destination
  subPath: application_default_credentials.json

nodeSelector: {}

tolerations: []

affinity: {}

env:
- name: region
  value: us-east1
- name: projectId      
  value: direct-volt-388318
- name : "APISERVER_CERT_LOCATION"
  value: "/run/config/pki/apiserver.crt"
- name: "APISERVER_KEY_LOCATION"
  value: "/run/config/pki/apiserver.key"
- name: "APISERVER_CA_CERT_LOCATION"
  value: "/run/config/pki/ca.crt"
- name: KUBELET_PORT
  value: "10250"
- name: region
  value: us-east1